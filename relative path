import os

# Set the base directory
base_dir = os.path.dirname(os.path.abspath(__file__))

# Set the directory to search for Excel files
search_dir = os.path.join(base_dir, 'relative/path/to/search/directory')

# Find all Excel files in the search directory and its subdirectories
excel_files = []
for dirpath, dirnames, filenames in os.walk(search_dir):
    for filename in filenames:
        if filename.endswith('.xlsx'):
            excel_files.append(os.path.join(dirpath, filename))



"""
1. `import os`: This line imports the `os` module, which provides functions for interacting with the operating system. We will use this module to work with file paths.

2. `base_dir = os.path.dirname(os.path.abspath(__file__))`: This line sets the base directory to the directory where the Alteryx file is located. The `__file__` variable contains the path of the current Python script (i.e., the Alteryx file). The `os.path.abspath` function returns the absolute path of this file, and the `os.path.dirname` function returns the directory name of this absolute path. The result is the absolute path of the directory where the Alteryx file is located.

3. `search_dir = os.path.join(base_dir, 'relative/path/to/search/directory')`: This line sets the search directory to a directory relative to the base directory. The `os.path.join` function joins the base directory and the relative path to the search directory to form an absolute path.

4. `excel_files = []`: This line initializes an empty list to store the absolute paths of all Excel files found in the search directory and its subdirectories.

5. `for dirpath, dirnames, filenames in os.walk(search_dir):`: This line starts a loop that iterates over all directories and subdirectories in the search directory. The `os.walk` function returns a generator that produces tuples containing the directory path, directory names, and file names for each directory it visits.

6. `for filename in filenames:`: This line starts a nested loop that iterates over all file names in the current directory.

7. `if filename.endswith('.xlsx'):`: This line checks if the current file name ends with '.xlsx', which indicates that it is an Excel file.

8. `excel_files.append(os.path.join(dirpath, filename))`: If an Excel file is found, this line constructs its absolute path by joining the current directory path (`dirpath`) and the file name (`filename`) using the `os.path.join` function. The resulting absolute path is then added to the list of Excel files using the `append` method.

After these steps are completed, you will have a list of absolute paths for all Excel files found in the search directory and its subdirectories. You can use this list as inputs in your Alteryx workflow.




You can incorporate the Python code into your Alteryx workflow by using the "Run Command" tool. Here's how:

1. Open your Alteryx workflow and drag a "Run Command" tool onto the canvas.

2. In the "Command" field, enter the path to your Python interpreter. This is usually something like `C:\Python39\python.exe`, but it may vary depending on your system.

3. In the "Command Arguments" field, enter the path to the Python script that contains the code I provided earlier. Make sure to enclose the path in double quotes if it contains spaces.

4. Connect the "Run Command" tool to the rest of your workflow as needed.

When you run your workflow, the "Run Command" tool will execute the Python script and run the code. The list of Excel file paths generated by the code will be available for use in downstream tools.

"""
